@charset "UTF-8";

// @description
// * in-to-px function.
// * This module tests a functionality of in-to-px function.

// @access private

// @version 1.0.0

// @author Khaled Mohamed

// @license MIT

// @repository: https://github.com/krypton225/sass-pire

// @namespace converters

// @module converters/in-to-px.test

// @dependencies:
// * - True.describe (true function).
// * - True.it (true function).
// * - True.assert-equal (true function).
// * - Dev.err (function).

// stylelint-disable number-max-precision
// stylelint-disable function-name-case

@use "../../../node_modules/sass-true/sass/true" as True;
@use "../../../src/functions/converters/inches-to-px" as LibFunc;
@use "../../../src/development-utils/error" as Dev;

$test-cases-in-to-px-map: (
    0: 0,
    0.5in: 48px,
    -0.5in: -48px,
    -92in: -8832px,
    80in: 7680px,
    5.82in: 558.72px,
    212in: 20352px,
    5.82cm: Dev.err("The in-to-px function accepts argument with inch unit only."),
    "Just a number": Dev.err("The parameter of in-to-px function must be in a number type."),
    true: Dev.err("The parameter of in-to-px function must be in a number type."),
    false: Dev.err("The parameter of in-to-px function must be in a number type."),
    (1, 2, 4): Dev.err("The parameter of in-to-px function must be in a number type.")
);

@each $case, $result in $test-cases-in-to-px-map {
    @include True.describe("[Function] in-to-px(#{$case}), Result: #{$result}") {
        @include True.it("Convert a value in inch to pixel.") {
            @include True.assert-equal(LibFunc.in-to-px($case), $result);
        }
    }
}
