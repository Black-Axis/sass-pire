@charset "UTF-8";

// @description
// * px-to-in function.
// * This module tests a functionality of px-to-in function.

// @access public

// @version 1.0.0

// @author Khaled Mohamed

// @license MIT

// @repository: https://github.com/krypton225/sass-pire

// @namespace converters

// @module converters/px-to-in.test

// @dependencies:
// * - true.describe (true function).
// * - true.it (true function).
// * - true.assert-equal (true function).
// * - err (function).

// stylelint-disable number-max-precision

@use "../../../node_modules/sass-true/sass/true" as *;
@use "../../../src/functions/converters/pixel-to-inches" as func;
@use "../../../src/development-utils/error" as dev;

$test-cases-px-to-in-map: (
    0: 0,
    0px: dev.err("The parameter dose not need a unit if it equals to zero."),
    344px: "3.583in",
    -0.5px: "-0.005in",
    -92px: "-0.958in",
    80px: "0.833in",
    5.82px: "0.061in",
    212px: "2.208in",
    "Just a number": dev.err("The parameter of px-to-in function must be in a number type."),
    true: dev.err("The parameter of px-to-in function must be in a number type."),
    false: dev.err("The parameter of px-to-in function must be in a number type."),
    (1, 2, 4): dev.err("The parameter of px-to-in function must be in a number type.")
);

@each $case, $result in $test-cases-px-to-in-map {
    @include describe("[Function] px-to-in(#{$case}), Result: #{$result}") {
        @include it("Convert a value in pixel to inches.") {
            @include assert-equal(func.px-to-in($case), $result);
        }
    }
}
