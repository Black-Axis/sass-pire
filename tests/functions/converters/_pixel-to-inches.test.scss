@charset "UTF-8";

// @description
// * px-to-in function.
// * This module tests a functionality of px-to-in function.

// @access private

// @version 1.0.0

// @author Khaled Mohamed

// @license MIT

// @repository: https://github.com/Black-Axis/sass-pire

// @namespace converters

// @module converters/px-to-in.test

// @dependencies:
// * - True.describe (true function).
// * - True.it (true function).
// * - True.assert-equal (true function).
// * - Dev.err (function).

// stylelint-disable number-max-precision
// stylelint-disable function-name-case

@use "true" as *;
@use "../../../src/functions/converters/pixel-to-inches" as LibFunc;
@use "../../../src/development-utils/error" as Dev;

$test-cases-px-to-in-map: (
    344px: "3.583in",
    -0.5px: "-0.005in",
    -92px: "-0.958in",
    80px: "0.833in",
    5.82px: "0.061in",
    212px: "2.208in",
    "Just a number": Dev.err("The parameter of px-to-in function must be in a number type."),
    true: Dev.err("The parameter of px-to-in function must be in a number type."),
    false: Dev.err("The parameter of px-to-in function must be in a number type."),
    (1, 2, 4): Dev.err("The parameter of px-to-in function must be in a number type.")
);

@each $case, $result in $test-cases-px-to-in-map {
    @include describe("[Function] px-to-in(#{$case}), Result: #{$result}") {
        @include it("Convert a value in pixel to inches.") {
            @include assert-equal(LibFunc.px-to-in($case), $result);
        }
    }
}
