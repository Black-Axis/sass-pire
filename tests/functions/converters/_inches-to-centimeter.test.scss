@charset "UTF-8";

// @description
// * in-to-cm function.
// * This module tests a functionality of in-to-cm function.

// @access private

// @version 1.0.0

// @author Khaled Mohamed

// @license MIT

// @repository: https://github.com/Black-Axis/sass-pire

// @namespace converters

// @module converters/in-to-cm.test

// @dependencies:
// * - True.describe (true function).
// * - True.it (true function).
// * - True.assert-equal (true function).
// * - Dev.err (function).

// stylelint-disable number-max-precision
// stylelint-disable function-name-case

@use "../../../node_modules/sass-true/sass/true" as True;
@use "../../../src/functions/converters/inches-to-centimeter" as LibFunc;
@use "../../../src/development-utils/error" as Dev;

$test-cases-in-to-cm-map: (
    0: 0,
    0.5in: "1.27cm",
    -0.5in: "-1.27cm",
    -92in: "-233.68cm",
    80in: "203.2cm",
    5.82in: "14.783cm",
    212in: "538.48cm",
    "Just a number": Dev.err("The parameter of in-to-cm function must be in a number type."),
    true: Dev.err("The parameter of in-to-cm function must be in a number type."),
    false: Dev.err("The parameter of in-to-cm function must be in a number type."),
    (1, 2, 4): Dev.err("The parameter of in-to-cm function must be in a number type.")
);

@each $case, $result in $test-cases-in-to-cm-map {
    @include True.describe("[Function] in-to-cm(#{$case}), Result: #{$result}") {
        @include True.it("Convert a value in inch to centimeter.") {
            @include True.assert-equal(LibFunc.in-to-cm($case), $result);
        }
    }
}
