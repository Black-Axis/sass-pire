@charset "UTF-8";

// @description
// * align-items mixin.
// * This module tests an align-items mixin.

// @access private

// @version 1.0.0

// @author Khaled Mohamed

// @license MIT

// @repository: https://github.com/Black-Axis/sass-pire

// @namespace main-props

// @module main-props/align-items

// @dependencies:
// * - map.get (SASS function).
// * - True.describe (mixin function).
// * - True.it (true mixin).
// * - True.assert (true mixin).
// * - True.output (true mixin).
// * - True.expect (true mixin).
// * - LibMixin.align-items (mixin).

@use "sass:map";
@use "true" as *;
@use "../../../../src/mixins/flex-props/main-props/align-items" as LibMixin;

// stylelint-disable value-no-vendor-prefix
// stylelint-disable declaration-block-no-duplicate-properties
// stylelint-disable value-keyword-case

$test-cases-align-items-map: (
    "test-case-1": (
        selector: ".test-align-items-normal",
        value: normal,
        expected: (
            -webkit-box-align: normal,
            -webkit-align-items: normal,
            -ms-flex-align: normal,
            -moz-align-items: normal,
            align-items: normal,
        ),
    ),
    "test-case-2": (
        selector: ".test-align-items-stretch",
        value: stretch,
        expected: (
            -webkit-box-align: stretch,
            -webkit-align-items: stretch,
            -ms-flex-align: stretch,
            -moz-align-items: stretch,
            align-items: stretch,
        ),
    ),
    "test-case-3": (
        selector: ".test-align-items-start",
        value: start,
        expected: (
            -webkit-box-align: start,
            -webkit-align-items: start,
            -ms-flex-align: start,
            -moz-align-items: start,
            align-items: start,
        ),
    ),
    "test-case-4": (
        selector: ".test-align-items-end",
        value: end,
        expected: (
            -webkit-box-align: end,
            -webkit-align-items: end,
            -ms-flex-align: end,
            -moz-align-items: end,
            align-items: end,
        ),
    ),
    "test-case-5": (
        selector: ".test-align-items-flex-start",
        value: flex-start,
        expected: (
            -webkit-box-align: flex-start,
            -webkit-align-items: flex-start,
            -ms-flex-align: flex-start,
            -moz-align-items: flex-start,
            align-items: flex-start,
        ),
    ),
    "test-case-6": (
        selector: ".test-align-items-flex-end",
        value: flex-end,
        expected: (
            -webkit-box-align: flex-end,
            -webkit-align-items: flex-end,
            -ms-flex-align: flex-end,
            -moz-align-items: flex-end,
            align-items: flex-end,
        ),
    ),
    "test-case-7": (
        selector: ".test-align-items-center",
        value: center,
        expected: (
            -webkit-box-align: center,
            -webkit-align-items: center,
            -ms-flex-align: center,
            -moz-align-items: center,
            align-items: center,
        ),
    ),
    "test-case-8": (
        selector: ".test-align-items-baseline",
        value: baseline,
        expected: (
            -webkit-box-align: baseline,
            -webkit-align-items: baseline,
            -ms-flex-align: baseline,
            -moz-align-items: baseline,
            align-items: baseline,
        ),
    ),
    "test-case-9": (
        selector: ".test-align-items-inherit",
        value: inherit,
        expected: (
            -webkit-box-align: inherit,
            -webkit-align-items: inherit,
            -ms-flex-align: inherit,
            -moz-align-items: inherit,
            align-items: inherit,
        ),
    ),
);

@each $case-name, $case-data in $test-cases-align-items-map {
    @include describe("[Mixin] align-items for #{$case-name}") {
        @include it("should output correct align-items properties") {
            @include assert {
                @include output {
                    #{map.get($case-data, selector)} {
                        @include LibMixin.align-items(#{map.get($case-data, value)});
                    }
                }

                @include expect {
                    #{map.get($case-data, selector)} {
                        @each $property, $value in map.get($case-data, expected) {
                            #{$property}: #{$value};
                        }
                    }
                }
            }
        }
    }
}
