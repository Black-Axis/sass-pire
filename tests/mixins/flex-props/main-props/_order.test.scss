@use "sass:map";
@use "sass:string";
@use "sass:meta";
@use "true" as *;
@use "../../../../src/mixins/flex-props/main-props/order" as LibMixin;

// stylelint-disable value-no-vendor-prefix
// stylelint-disable declaration-block-no-duplicate-properties
// stylelint-disable value-keyword-case

$test-cases-order-map: (
    "test-case-1": (
        selector: ".test-order-1",
        value: 1,
        expected: (
            -webkit-box-ordinal-group: 1,
            -moz-box-ordinal-group: 1,
            -webkit-order: 1,
            -ms-flex-order: 1,
            -ms-order: 1,
            -moz-order: 1,
            -o-order: 1,
            order: 1,
        ),
    ),
    "test-case-2": (
        selector: ".test-order-minus-1",
        value: -1,
        expected: (
            -webkit-box-ordinal-group: -1,
            -moz-box-ordinal-group: -1,
            -webkit-order: -1,
            -ms-flex-order: -1,
            -ms-order: -1,
            -moz-order: -1,
            -o-order: -1,
            order: -1,
        ),
    ),
    "test-case-3": (
        selector: ".test-order-0",
        value: 0,
        expected: (
            -webkit-box-ordinal-group: 0,
            -moz-box-ordinal-group: 0,
            -webkit-order: 0,
            -ms-flex-order: 0,
            -ms-order: 0,
            -moz-order: 0,
            -o-order: 0,
            order: 0,
        ),
    ),
);

@each $case-name, $case-data in $test-cases-order-map {
    @include describe("[Mixin] order for #{$case-name}") {
        @include it("should output correct order properties") {
            @include assert {
                @include output {
                    #{map.get($case-data, selector)} {
                        $current-value: map.get($case-data, value);

                        @if meta.type-of($current-value) != number {
                            // stylelint-disable-next-line scss/no-global-function-names
                            $first-char: str-slice(#{$current-value}, 1, 1);

                            // Check if it looks like a numeric string
                            @if $first-char == "0" or
                                $first-char == "1" or
                                $first-char == "2" or
                                $first-char == "3" or
                                $first-char == "4" or
                                $first-char == "5" or
                                $first-char == "6" or
                                $first-char == "7" or
                                $first-char == "8" or
                                $first-char == "9" {
                                $current-value: string.unquote(#{$current-value});
                            }
                        }

                        @include LibMixin.order($current-value);
                    }
                }

                @include expect {
                    #{map.get($case-data, selector)} {
                        @each $property, $value in map.get($case-data, expected) {
                            #{$property}: #{$value};
                        }
                    }
                }
            }
        }
    }
}
