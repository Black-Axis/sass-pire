@charset "UTF-8";

// @description
// * justify-content mixin.
// * This mixin applies the `justify-content` property with vendor
// * prefixes to a container. It allows you to set the horizontal
// * alignment of flex items along the main axis.

// @author Khaled Mohamed

// @namespace main-props

// @module main-props/justify-content

// @param {String} $value
// * The value for `justify-content`.
// * Allowed values: flex-start, flex-end, center, space-between,
// * space-around, space-evenly.
// * Default: flex-start.

// @example
// * .example {
// *   @include justify-content(center);
// * }

// @output:
// * .example {
// *   -webkit-box-pack: start;
// *   -webkit-justify-content: start;
// *   -ms-flex-pack: start;
// *   -moz-justify-content: start;
// *   justify-content: start;
// * }

// @note
// * There is two mixins in this file.
// * The first is the (justify-content) mixin and second is (j-c) mixin.
// * The second one is for only simplicity when using (justify-content) mixin.
// * The core logic of (j-c) mixin is to call the first one.
// * You can use one of them as you want.

@use "sass:list";
@use "../../../functions/global/is-in-list" as func;

@mixin justify-content($value: flex-start) {
    $justify-content-props: (
        -webkit-box-pack,
        -webkit-justify-content,
        -ms-flex-pack,
        -moz-justify-content,
        justify-content
    ) !default;

    // stylelint-disable-next-line scss/dollar-variable-empty-line-before
    $justify-content-values: (
        normal,
        stretch,
        start,
        end,
        right,
        left,
        flex-start,
        flex-end,
        center,
        space-between,
        space-around,
        space-evenly,
        inherit
    ) !default;

    @if func.is-in-list($justify-content-values, $value) {
        @each $prop in $justify-content-props {
            #{$prop}: $value;
        }
    }
}

@mixin j-c($value: flex-start) {
    @include justify-content($value);
}
