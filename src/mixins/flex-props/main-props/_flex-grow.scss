@charset "UTF-8";

// @description
// * flex-grow mixin.
// * This mixin provides a convenient way to set the `flex-grow` property
// * with vendor prefixes for better cross-browser compatibility.

// @access public

// @version 1.2.1

// @author Khaled Mohamed

// @license MIT

// @repository: https://github.com/Black-Axis/sass-pire

// @reference: https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow

// @namespace main-props

// @module main-props/flex-grow

// @dependencies:
// * - meta.type-of (SASS function).
// * - LibFunc.cut-unit (function).

// @param {Number} $val
// * The value for the `flex-grow` property.
// * Must be a non-negative number.
// * Default: 0.

// @throws {Error}
// * Throws an error if the provided $val is not a number
// * or if it's a negative number.

// @example
// * .example {
// *   @include flex-grow(2);
// * }

// @output:
// * .example {
// *   -webkit-flex-grow: 2;
// *   -webkit-box-flex: 2;
// *   -ms-flex-positive: 2;
// *   -moz-box-flex: 2;
// *   flex-grow: 2;
// * }

// @note
// * There are two mixins in this file.
// * The first is the (flex-grow) mixin and second is (f-g) mixin.
// * The second one is for only simplicity when using (flex-grow) mixin.
// * The core logic of (f-g) mixin is to call the first one.
// * You can use one of them as you want.

@use "sass:meta";
@use "../../../functions/global/cut-unit" as LibFunc;

@mixin flex-grow($value: 0) {
    $flex-grow-props: (-webkit-flex-grow, -webkit-box-flex, -ms-flex-positive, -moz-box-flex, flex-grow) !default;

    @if meta.type-of($value) != number {
        @error "$value of flex-grow argument must be of type number.";
    }

    @if $value < 0 {
        @error "The value of flex-grow argument must be bigger than or equal to zero.";
    }

    @each $prop in $flex-grow-props {
        #{$prop}: LibFunc.cut-unit($value);
    }
}

@mixin f-g($value: 0) {
    @include flex-grow($value);
}
