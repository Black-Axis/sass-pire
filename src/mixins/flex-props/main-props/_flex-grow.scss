@charset "UTF-8";

// @description
// * flex-grow mixin.
// * This mixin provides a convenient way to set the `flex-grow` property
// * with vendor prefixes for better cross-browser compatibility.

// @author Khaled Mohamed

// @namespace main-props

// @module main-props/flex-grow

// @param {Number} $val
// * The value for the `flex-grow` property.
// * Must be a non-negative number.
// * Default: 0.

// @throws {Error}
// * Throws an error if the provided $val is not a number
// * or if it's a negative number.

// @example
// * .example {
// *   @include flex-grow(2);
// * }

// @output:
// * .example {
// *   -webkit-flex-grow: 2;
// *   -webkit-box-flex: 2;
// *   -ms-flex-positive: 2;
// *   -moz-box-flex: 2;
// *   flex-grow: 2;
// * }

@use "sass:list";
@use "../../../functions/global/cut-unit" as func;

@mixin flex-grow($val: 0) {
    $flex-grow-props: (-webkit-flex-grow, -webkit-box-flex, -ms-flex-positive, -moz-box-flex, flex-grow) !default;

    @if type-of($val) != number {
        @error "$val of flex-grow argument must be of type number.";
    }

    @if $val < 0 {
        @error "The value of flex-grow argument must be bigger than or equal to zero.";
    }

    @each $prop in $flex-grow-props {
        #{$prop}: func.cut-unit($val);
    }
}
