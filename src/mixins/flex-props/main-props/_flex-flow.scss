@charset "UTF-8";

// @description
// * flow mixin.
// * This mixin provides a convenient way to set the `flex-flow` property
// * with vendor prefixes for better cross-browser compatibility.
// * The `flex-flow` is a shorthand for flex-direction & flex-wrap.

// @access public

// @version 1.0.0

// @author Khaled Mohamed

// @license MIT

// @repository: https://github.com/Black-Axis/sass-pire

// @reference: https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow

// @namespace main-props

// @module main-props/flex-flow

// @dependencies:
// * - LibMixin1.flex-dir (mixin);
// * - LibMixin2.flex-wrap (mixin);

// @param {String} $flex-dir-value
// * The value for the `flex-direction` property.

// @param {String} $flex-wrap-value
// * The value for the `flex-wrap` property.

// @example
// * .example {
// *   @include flow(row, no);
// * }

// @output:
// * .example {
// *   -webkit-box-orient: horizontal;
// *   -webkit-box-direction: normal;
// *   -webkit-flex-direction: row;
// *   -ms-flex-direction: row;
// *   -moz-flex-direction: row;
// *   -o-flex-direction: row;
// *   flex-direction: row;
// *   -ms-flex-wrap: nowrap;
// *   flex-wrap: nowrap;
// * }

@use "flex-direction" as LibMixin1;
@use "flex-wrap" as LibMixin2;

@mixin flow($flex-dir-value: row, $flex-wrap-value: nowrap) {
    @include LibMixin1.flex-dir($flex-dir-value);
    @include LibMixin2.flex-wrap($flex-wrap-value);
}
