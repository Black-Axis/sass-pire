@charset "UTF-8";

// @description
// * align-items mixin.
// * This mixin provides a convenient way to set the `align-items`
// * property with vendor prefixes for better cross-browser compatibility.

// @access public

// @author Khaled Mohamed

// @license MIT

// @namespace main-props

// @module main-props/align-items

// @dependencies:
// * - is-in-list (function).

// @param {String} $value
// * The value for the `align-items` property.
// * Allowed values: normal, stretch, start, end, flex-start, flex-end,
// * center, baseline, inherit.
// * Default: normal.

// @throws {Error}
// * Throws an error if the provided $value is not one of
// * the allowed values.

// @example
// * .example {
// *   @include align-items(center);
// * }

// @output
// * .example {
// *   -webkit-box-align: center;
// *   -webkit-align-items: center;
// *   -ms-flex-align: center;
// *   -moz-align-items: center;
// *   align-items: center;
// * }

// @note
// * There is two mixins in this file.
// * The first is the (align-items) mixin and second is (a-i) mixin.
// * The second one is for only simplicity when using (align-items) mixin.
// * The core logic of (a-i) mixin is to call the first one.
// * You can use one of them as you want.

@use "sass:list";
@use "../../../functions/global/is-in-list" as func;

@mixin align-items($value: normal) {
    $align-items-props: (
        -webkit-box-align,
        -webkit-align-items,
        -ms-flex-align,
        -moz-align-items,
        align-items
    ) !default;

    // stylelint-disable-next-line scss/dollar-variable-empty-line-before
    $align-items-values: (normal, stretch, start, end, flex-start, flex-end, center, baseline, inherit) !default;

    @if func.is-in-list($align-items-values, $value) {
        @each $prop in $align-items-props {
            #{$prop}: $value;
        }
    }
}

@mixin a-i($value: normal) {
    @include align-items($value);
}
