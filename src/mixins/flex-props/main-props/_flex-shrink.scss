// * Flex Shrink Mixin
// * This mixin provides a convenient way to set the `flex-shrink` property
// * with vendor prefixes for better cross-browser compatibility.

// @group mixins/flex-props/main-props

// @param {String|Number} $val - The value for the `flex-shrink` property.
// * Allowed values: initial, inherit, or a non-negative number.
// * Default: initial.

// @throws {Error} Throws an error if the provided $val is not one of the allowed values or if it's a negative number.

// @example
// * .example {
// *     @include flex-shrink(2);
// * }

// @output:
// * .example {
// *   -webkit-flex-shrink: 2;
// *   -ms-flex-negative: 2;
// *   -ms-flex-shrink: 2;
// *   -moz-box-flex: 2;
// *   -moz-flex-shrink: 2;
// *   flex-shrink: 2;
// * }

// stylelint-disable scss/dollar-variable-empty-line-before
@charset "UTF-8";
@use "sass:list";
@import "../../../functions/global/cut-unit";

@mixin flex-shrink($val) {
    $flex-shrink-props: (
        -webkit-flex-shrink,
        -ms-flex-negative,
        -ms-flex-shrink,
        -moz-box-flex,
        -moz-flex-shrink,
        flex-shrink
    ) !default;

    $flex-shrink-values: (initial, inherit) !default;

    @if type-of($val) == string and not is-in-list($flex-shrink-values, $val) {
        @error "$val is not a valid value for flex-shrink. Allowed string values: #{$flex-shrink-values}.";
    }

    @if type-of($val) == number and $val < 0 {
        @error "$val must be greater than or equal to zero for flex-shrink.";
    }

    @each $prop in $flex-shrink-props {
        // stylelint-disable-next-line scss/no-global-function-names
        #{$prop}: if(type-of($val) == string, $val, cut-unit($val));
    }
}
