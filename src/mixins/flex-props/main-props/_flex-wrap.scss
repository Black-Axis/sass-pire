@charset "UTF-8";

// @description
// * flex-wrap mixin.
// * This mixin provides a convenient way to set the `flex-wrap` property
// * with vendor prefixes for better cross-browser compatibility.

// @author Khaled Mohamed

// @namespace main-props

// @module main-props/flex-wrap

// @param {String} $val
// * The value for the `flex-wrap` property.
// * Allowed values:
// * nowrap, wrap, wrap-reverse, "", no, yes, w, wrap-rev, w-rev, inherit.
// * Default: nowrap.

// @throws {Error}
// * Throws an error if the provided $val is not one of the
// * allowed values.

// @example
// * .example {
// *   @include flex-wrap(wrap);
// * }

// @output
// * .example {
// *   -webkit-flex-wrap: wrap;
// *   -ms-flex-wrap: wrap;
// *   flex-wrap: wrap;
// * }

// stylelint-disable scss/dollar-variable-empty-line-before

@use "sass:list";
@use "sass:math";
@use "../../vendor-prefixes/prefix" as pref;
@use "../../../functions/global/is-in-list" as func;

@mixin flex-wrap($val: nowrap) {
    $flex-wrap-values: (nowrap, wrap, wrap-reverse, "", no, yes, w, wrap-rev, w-rev, inherit) !default;

    $flex-wrap-map: (
        nowrap: nowrap,
        "": nowrap,
        no: nowrap,
        wrap: wrap,
        yes: wrap,
        w: wrap,
        wrap-reverse: wrap-reverse,
        wrap-rev: wrap-reverse,
        w-rev: wrap-reverse,
        inherit: inherit
    ) !default;

    @if func.is-in-list(map-keys($flex-wrap-map), $val) {
        // stylelint-disable-next-line scss/no-global-function-names
        $flex-wrap-value: map-get($flex-wrap-map, $val);

        @include pref.prefixing-ms(flex-wrap, $flex-wrap-value);
    }
}
