@charset "UTF-8";

// @description
// * grid mixin.
// * Create a responsive grid layout with specified column width and gap.

// @access public

// @author Khaled Mohamed

// @license MIT

// @namespace general

// @module general/grid

// @dependencies:
// * - math.unit (SASS function).
// * - prefix-val-ms (mixin).
// * - is-in-list (function).

// @param {Number} $min-col-size
// * Minimum width of one column in rem units.

// @param {Number} $gap
// * Space between every column in both x-axis and y-axis in rem units.

// @example
// * .example {
// *   @include grid($min-col-size: 6rem, $gap: 2rem);
// * }

// @output
// * .example {
// *   display: -ms-grid;
// *   display: grid;
// *   grid-template-columns:
// *        repeat(auto-fit, minmax(min(6rem, 100%), 1fr));
// *   gap: 2rem;
// * }

@use "sass:list";
@use "sass:math";
@use "../../functions/global/is-in-list" as func;
@use "../vendor-prefixes/prefix-val" as pref;

@mixin grid($min-col-size: 4rem, $gap: 1rem) {
    @if type-of($min-col-size) != number {
        @error "$min-col-size argument must be of type number.";
    }

    @if type-of($gap) != number {
        @error "$gap argument must be of type number.";
    }

    // * main fixed units.
    // * You can add more than these units as needed.
    $col-units: (em, rem, px, fr);
    $gap-units: (#{"%"}, rem, px, em);

    // * Get the unit which is passed with
    // * the two numbers as arguments to mixin.
    $get-col-unit: math.unit($min-col-size);
    $get-gap-unit: math.unit($gap);

    @if func.is-in-list($col-units, $get-col-unit) and func.is-in-list($gap-units, $get-gap-unit) {
        @include pref.prefix-val-ms(display, grid);

        grid-template-columns: repeat(auto-fit, minmax(min(#{$min-col-size}, 100%), 1fr));
        gap: #{$gap};
    }
}
