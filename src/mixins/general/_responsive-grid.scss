// This is just a mixin for using a grid to make a layout as responsive design.

@use "sass:list";
@use "sass:math";

// * @param: {Number} $min-col-size - min width of the one column of the item.
// * @param: {Number} $gap - the space between every column in both x-axis and y-axis.
// * @return: Nothing.
// * @output: Display grid with its specified column width with gapping.

@mixin grid($min-col-size: 4rem, $gap: 1rem) {
    @if type-of($min-col-size) != number {
        @error "$min-col-size argument must be of type number.";
    }

    @if type-of($gap) != number {
        @error "$gap argument must be of type number.";
    }

    // * Main fixed units.
    // * You can add more than these units as needed.
    $col-units: (em, rem, px, fr);
    $gap-units: (#{"%"}, rem, px, em);

    // * Get the unit which is passed with the two numbers as arguments to mixin.
    $get-col-unit: math.unit($min-col-size);
    $get-gap-unit: math.unit($gap);

    // * Check if the unit of one column was passed to mixin exists in its units.
    @if not list.index($col-units, $get-col-unit) {
        @error "$min-col-size must has one of these units: (#{$col-units})";
    }

    // * Check if the unit of gap was passed to mixin exists in its units.
    @if not list.index($gap-units, $get-gap-unit) {
        @error "$gap argument must has one of these units: (#{$gap-units})";
    }

    @include prefix-val-ms(display, grid);

    grid-template-columns: repeat(auto-fit, minmax(min(#{$min-col-size}, 100%), 1fr));
    gap: #{$gap};
}
