@charset "UTF-8";

// @description
// * iphone mixin.
// * The iphone mixin is designed to simplify the creation of media
// * queries targeting iPhone devices with 320px Ã— 480px.
// * It allows you to specify the orientation type (portrait or landscape)
// * and includes common device-specific media query conditions.

// @access public

// @version 1.1.1

// @author Khaled Mohamed

// @license MIT

// @repository: https://github.com/krypton225/sass-pire

// @namespace iphone

// @module iphone/iphone

// @dependencies:
// * - is-in-list (function).

// @param {String} $orientation-type
// * The type of the orientation for the mixin of the device type.
// * It can be (landscape, land, l, portrait, port, p, all, "").

// @example
// * .example {
// *   @include iphone(land) {
// *     content: "example";
// *   }
// * }

// @output
// * @media only screen and (min-device-width: 320px)
// * and (max-device-width: 480px)
// * and (-webkit-min-device-pixel-ratio: 2)
// * and (orientation: landscape) {
// *  .example {
// *    content: "example";
// *  }
// * }

// @note 1
// * This mixin implements media query for screens for
// * iPhone normal device. But for simplicity we wrote
// * the name of the mixin with iphone

// @note 2
// * There are two mixins in this file.
// * The first is the (iphone) mixin and second is (ip) mixin.
// * The second one is for only simplicity when using (iphone) mixin.
// * The core logic of (ip) mixin is to call the first one.
// * You can use one of them as you want.

// stylelint-disable media-feature-name-no-vendor-prefix
// stylelint-disable scss/operator-no-newline-after

@use "sass:list";
@use "../../../../../functions/global/is-in-list" as func;
@use "../../../../../functions/list/merge" as sp;

@mixin iphone($orientation-type: portrait) {
    @if type-of($orientation-type) != string {
        @error "Orientation type in iphone mixin must be in string type.";
    }

    $landscape-values: (landscape, land, l) !default;
    $portrait-values: (portrait, port, p, "") !default;
    $all-orientations-types: sp.merge($landscape-values, $portrait-values) !default;
    $min-device-width: 320px !default;
    $max-device-width: 480px !default;
    $min-device-pixel-ratio: 2 !default;

    @if $orientation-type == all {
        @media screen and (min-device-width: $min-device-width)
            and (max-device-width: $max-device-width)
            and (-webkit-device-pixel-ratio: $min-device-pixel-ratio) {
            @content;
        }
    } @else {
        @if func.is-in-list($all-orientations-types, $orientation-type) {
            @if list.index($landscape-values, $orientation-type) {
                @media only screen and (min-device-width: $min-device-width)
                    and (max-device-width: $max-device-width)
                    and (-webkit-min-device-pixel-ratio: $min-device-pixel-ratio)
                    and (orientation: landscape) {
                    @content;
                }
            } @else if list.index($portrait-values, $orientation-type) {
                @media only screen and (min-device-width: $min-device-width)
                    and (max-device-width: $max-device-width)
                    and (-webkit-min-device-pixel-ratio: $min-device-pixel-ratio)
                    and (orientation: portrait) {
                    @content;
                }
            }
        }
    }
}

@mixin ip($orientation-type: portrait) {
    @include iphone($orientation-type) {
        @content;
    }
}
