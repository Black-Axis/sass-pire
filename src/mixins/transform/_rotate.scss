@charset "UTF-8";

// @description
// * rotate mixin.
// * This mixin provides a convenient way to apply a general rotation
// * using the `transform` property with proper vendor prefixes.
// * It supports both angle values and predefined keywords such as
// * `inherit`, `initial`, `revert`, `unset`, and `none`.

// @access public

// @author Khaled Mohamed

// @namespace transform

// @module transform/rotate

// @param {Number|String} $val
// * The rotation value.
// * Default: 0deg.
// * If a number, the angle unit must be one of: (deg, grad, rad, turn).
// * If a string, it can be: (inherit, initial, revert, unset, none).

// @example
// * .example {
// *   @include rotate(45deg);
// * }

// @output
// * .example {
// *   -webkit-transform: rotate(45deg);
// *   -moz-transform: rotate(45deg);
// *   -ms-transform: rotate(45deg);
// *   -o-transform: rotate(45deg);
// *   transform: rotate(45deg);
// * }

@use "sass:list";
@use "sass:math";
@use "../vendor-prefixes/prefix" as pref;
@use "../../abstract" as var;

@mixin rotate($val: 0deg) {
    $transform-props-values: (inherit, initial, revert, unset, none) !default;

    @if type-of($val) == number {
        @if not index(var.$angle-units, math.unit($val)) {
            @error "$val must has one of these units: (#{var.$angle-units})";
        }
    } @else if type-of($val) == string {
        @if not index($transform-props-values, $val) {
            @error "The value of transform property with rotate value must has one of these: (#{$transform-props-values})";
        }
    } @else {
        @error "The value of rotate in transform property must be in number or string type.";
    }

    @include pref.prefixing-all(transform, rotate($val));
}
