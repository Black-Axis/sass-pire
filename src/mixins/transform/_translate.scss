@charset "UTF-8";

// @description
// * translate mixin.
// * This mixin provides a convenient way to apply translation using the
// * `transform` property with proper vendor prefixes.
// * It supports both numerical values for translation distances and
// * predefined keywords such as:
// * `inherit`, `initial`, `revert`, `unset`, and `none`.
// * If only one value is provided, it is applied to both x and y axes.

// @access public

// @version 1.6.0

// @author Khaled Mohamed

// @license MIT

// @repository: https://github.com/krypton225/sass-pire

// @reference: https://developer.mozilla.org/en-US/docs/Web/CSS/transform

// @namespace transform

// @module transform/translate

// @dependencies:
// * - meta.type-of (SASS function).
// * - math.unit (SASS function).
// * - $main-units (variable).
// * - LibMixin.prefixing-all (mixin).
// * - toggle (function).

// @param {Number|String} $x
// * The horizontal translation distance.
// * Default: 1px.
// * If a number, it must have a valid unit from the main-units list.
// * If a string, it can be: (inherit, initial, revert, unset, none).

// @param {Number|String} $y
// * The vertical translation distance.
// * Default: Same as $x.
// * If a number, it must have a valid unit from the main-units list.
// * If a string, it can be: (inherit, initial, revert, unset, none).

// @example
// * .example {
// *   @include translate(20px);
// * }

// @output
// * .example {
// *   -webkit-transform: translate(20px, 20px);
// *   -moz-transform: translate(20px, 20px);
// *   -ms-transform: translate(20px, 20px);
// *   -o-transform: translate(20px, 20px);
// *   transform: translate(20px, 20px);
// * }

@use "sass:meta";
@use "sass:list";
@use "sass:math";
@use "../vendor-prefixes/prefix" as LibMixin;
@use "../../development-utils/toggle-error-message" as Error;

@mixin translate($x: 1px, $y: $x) {
    $transform-props-values: (inherit, initial, revert, unset, none) !default;
    $main-units: (
        #{"%"},
        cm,
        mm,
        in,
        px,
        pt,
        pc,
        em,
        ex,
        ch,
        rem,
        vw,
        vh,
        vmin,
        vmax,
        dpi,
        dpcm,
        dppx,
        vw,
        svw,
        lvw,
        dvw,
        vh,
        lvh,
        dvh,
        vi,
        svi,
        lvi,
        vmin,
        svmin,
        lvmin,
        dvmin,
        vmax,
        svmax,
        lvmax,
        dvmax,
        vb,
        lvb,
        dvb
    ) !default;

    @if meta.type-of($x) == number and meta.type-of($y) == number {
        @if not index($main-units, math.unit($x)) or not index($main-units, math.unit($y)) {
            content: Error.toggle(
                "The parameter of translate mixin must has one of these units: (#{$main-units})."
            );
        } @else {
            @include LibMixin.prefixing-all(transform, translate($x, $y));
        }
    } @else if meta.type-of($x) == string and meta.type-of($y) == string {
        @if index($transform-props-values, $x) and index($transform-props-values, $y) {
            @include LibMixin.prefixing-all(transform, translate($x, $y));
        } @else {
            content: Error.toggle(
                "The parameter of translate mixin must has one of these values: (#{$transform-props-values})."
            );
        }
    } @else if meta.type-of($x) == number and meta.type-of($y) == string {
        @if index($main-units, math.unit($x)) and index($transform-props-values, $y) {
            @include LibMixin.prefixing-all(transform, translate($x, $y));
        } @else {
            content: Error.toggle(
                "The parameter of translate mixin must has one of these units: (#{$main-units})."
            );
        }
    } @else if meta.type-of($x) == string and meta.type-of($y) == number {
        @if index($main-units, math.unit($y)) and index($transform-props-values, $x) {
            @include LibMixin.prefixing-all(transform, translate($x, $y));
        } @else {
            content: Error.toggle(
                "The parameter of translate mixin must has one of these units: (#{$main-units})."
            );
        }
    } @else {
        content: Error.toggle("The value of translate mixin must be in a number or a string type.");
    }
}
