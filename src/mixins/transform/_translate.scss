@charset "UTF-8";

// @description
// * translate mixin.
// * This mixin provides a convenient way to apply translation using the
// * `transform` property with proper vendor prefixes.
// * It supports both numerical values for translation distances and
// * predefined keywords such as:
// * 'inherit', 'initial', 'revert', 'unset', and 'none'.
// * If only one value is provided, it is applied to both x and y axes.

// @access public

// @author Khaled Mohamed

// @namespace transform

// @module transform/translate

// @param {Number|String} $x
// * The horizontal translation distance.
// * Default: 1px.
// * If a number, it must have a valid unit from the main-units list.
// * If a string, it can be: (inherit, initial, revert, unset, none).

// @param {Number|String} $y
// * The vertical translation distance.
// * Default: Same as $x.
// * If a number, it must have a valid unit from the main-units list.
// * If a string, it can be: (inherit, initial, revert, unset, none).

// @example
// * .example {
// *   @include translate(20px);
// * }

// @output
// * .example {
// *   -webkit-transform: translate(20px, 20px);
// *   -moz-transform: translate(20px, 20px);
// *   -ms-transform: translate(20px, 20px);
// *   -o-transform: translate(20px, 20px);
// *   transform: translate(20px, 20px);
// * }

@use "sass:list";
@use "sass:math";
@use "../vendor-prefixes/prefix" as prefix;
@use "../../abstract" as var;

@mixin translate($x: 1px, $y: $x) {
    $transform-props-values: (inherit, initial, revert, unset, none) !default;

    @if type-of($x) == number and type-of($y) == number {
        @if not index(var.$main-units, math.unit($x)) {
            @error "$x must has one of these units: (#{var.$main-units})";
        }

        @if not index(var.$main-units, math.unit($y)) {
            @error "$y must has one of these units: (#{var.$main-units})";
        }
    } @else if type-of($x) == string {
        @if not index($transform-props-values, $x) {
            @error "The value of transform property with translate value must has one of these: (#{$transform-props-values})";
        }
    } @else {
        @error "x and y values of translate in transform property must be in number or string type.";
    }

    @include prefix.prefixing-all(transform, translate($x, $y));
}
