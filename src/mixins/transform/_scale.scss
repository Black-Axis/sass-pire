@charset "UTF-8";

// * Scale Mixin
// * This mixin provides a convenient way to apply scaling using the `transform` property
// * with proper vendor prefixes. It supports both numerical values for scaling factors
// * and predefined keywords such as 'inherit', 'initial', 'revert', 'unset', and 'none'.

// @author Khaled Mohamed

// @namespace transform

// @module transform-scale

// @param {Number|String} $x - The scaling factor for the x-axis. Default: 1.
// * If a number, it must be unitless.
// * If a string, it can be one of: (inherit, initial, revert, unset, none).

// @param {Number|String} $y - The scaling factor for the y-axis. Default: $x.
// * If a number, it must be unitless.
// * If a string, it can be one of: (inherit, initial, revert, unset, none).

// @example
// * .example {
// *   @include scale(2);
// * }

// @output
// * .example {
// *   -webkit-transform: scale(2, 2);
// *   -moz-transform: scale(2, 2);
// *   -ms-transform: scale(2, 2);
// *   -o-transform: scale(2, 2);
// *   transform: scale(2, 2);
// * }

@use "sass:list";
@use "sass:math";
@use "../vendor-prefixes/prefix" as prefix;

@mixin scale($x: 1, $y: $x) {
    $transform-props-values: (inherit, initial, revert, unset, none) !default;

    @if type-of($x) == number and type-of($y) == number {
        @if not unitless($x) or not unitless($y) {
            @error "The value of scale property must not has any unit.";
        }
    } @else if type-of($x) == string {
        @if not index($transform-props-values, $x) or not index($transform-props-values, $y) {
            @error "The value of transform property with scale value must has one of these: (#{$transform-props-values})";
        }
    } @else {
        @error "The value of scale in transform property must be in number or string type.";
    }

    @include prefix.prefixing-all(transform, scale($x, $y));
}
