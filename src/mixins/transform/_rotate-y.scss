@charset "UTF-8";

// * Rotate Y Mixin
// * This mixin provides a convenient way to apply a rotation around the Y-axis using the
// * `transform` property with proper vendor prefixes. It supports both angle values and
// * predefined keywords such as 'inherit', 'initial', 'revert', 'unset', and 'none'.

// @author Khaled Mohamed

// @module transform

// @group transform-rotate-y

// @param {Number|String} $angle - The rotation angle. Default: 0deg.
// * If a number, the angle unit must be one of: (deg, grad, rad, turn).
// * If a string, it can be one of: (inherit, initial, revert, unset, none).

// @example
// * .example {
// *   @include rotate-y(45deg);
// * }

// @output
// * .example {
// *   -webkit-transform: rotateY(45deg);
// *   -moz-transform: rotateY(45deg);
// *   -ms-transform: rotateY(45deg);
// *   -o-transform: rotateY(45deg);
// *   transform: rotateY(45deg);
// * }

@use "sass:list";
@use "sass:math";
@use "../vendor-prefixes/prefix" as prefix;
@use "../../abstract" as var;

@mixin rotate-y($angle: 0deg) {
    $transform-props-values: (inherit, initial, revert, unset, none) !default;

    @if type-of($angle) == number {
        @if not index(var.$angle-units, math.unit($angle)) {
            @error "$angle must has one of these units: (#{var.$angle-units})";
        }
    } @else if type-of($angle) == string {
        @if not index($transform-props-values, $angle) {
            @error "The value of transform property with rotate value must has one of these: (#{$transform-props-values})";
        }
    } @else {
        @error "The value of rotate in transform property must be in number or string type.";
    }

    @include prefix.prefixing-all(transform, rotateY($angle));
}
