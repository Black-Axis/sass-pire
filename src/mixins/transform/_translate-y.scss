@charset "UTF-8";

// @description
// * translate-y mixin.
// * This mixin provides a convenient way to apply horizontal translation
// * using the `transform` property with proper vendor prefixes.
// * It supports both numerical values for translation distances and
// * predefined keywords such as:
// * `inherit`, `initial`, `revert`, `unset`, and `none`.

// @access public

// @author Khaled Mohamed

// @namespace transform

// @module transform/translate-y

// @dependencies:
// * - math.unit (SASS function).
// * - $main-units (variable).
// * - pref.prefixing-all (mixin).

// @param {Number|String} $x
// * The vertical translation distance.
// * Default: 1px.
// * If a number, it must have a valid unit from the main-units list.
// * If a string, it can be: (inherit, initial, revert, unset, none).

// @example
// * .example {
// *   @include translate-y(10px);
// * }

// @output
// * .example {
// *   -webkit-transform: translateY(10px);
// *   -moz-transform: translateY(10px);
// *   -ms-transform: translateY(10px);
// *   -o-transform: translateY(10px);
// *   transform: translateY(10px);
// * }

@use "sass:list";
@use "sass:math";
@use "../vendor-prefixes/prefix" as pref;
@use "../../abstract" as var;

@mixin translate-y($y: 1px) {
    $transform-props-values: (inherit, initial, revert, unset, none) !default;

    @if type-of($y) == number {
        @if not index(var.$main-units, math.unit($y)) {
            @error "$y must has one of these units: (#{var.$main-units})";
        }
    } @else if type-of($y) == string {
        @if not index(var.$transform-props-values, $y) {
            @error "The value of transform property with translate value must has one of these: (#{var.$transform-props-values})";
        }
    } @else {
        @error "y value of translate in transform property must be in number or string type.";
    }

    @include pref.prefixing-all(transform, translateY($y));
}
